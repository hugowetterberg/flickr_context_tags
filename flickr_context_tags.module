<?php
// $Id$

function flickr_context_tags_menu() {
  $items = array();

  $items['admin/settings/flickr/context_tags'] = array(
    'title' => 'Context tags',
    'description' => 'Settings for the contextual flickr search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickr_context_tags_settings'),
    'file' => 'flickr_context_tags_admin.inc.php',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  
  $items['flickr-context-tags/user/%flickruser'] = array(
    'title' => 'Flickr user',
    'description' => 'Page for flickr user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickr_context_tags_flickr_user', 2),
    'file' => 'flickr_context_tags_admin.inc.php',
    'type' => MENU_CALLBACK,
    'access arguments' => array('flickr context tags block user'),
  );

  return $items;
}

function flickruser_load($user_id) {
  $res = flickr_request('flickr.people.getInfo', array(
    'user_id' => $user_id,
  ));
  if ($res['stat']=='ok') {
    return $res['person'];
  }
}

function flickr_context_tags_perm() {
  return array('flickr context tags block user');
}

/**
 * Implementation of hook_block().
 */
function flickr_context_tags_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    // List our blocks
    case 'list':
      $blocks = array();
      $blocks[0] = array(
        'info' => t('From Flickr'),
        'cache' => BLOCK_CACHE_PER_PAGE,
      );
      return $blocks;
    break;
    // View the block
    case 'view':
      $block = array();
      switch ($delta) {
        case 0:
          drupal_add_css(drupal_get_path('module','flickr_context_tags') . '/css/flickr.css');
          if (arg(0) == 'node' && is_numeric(arg(1))) {
            $block['subject'] = t('From Flickr');

            $node = node_load(arg(1));
            $ex = flickr_context_tags_get_photos($node);

            $out = '';

            if (!empty($ex)) {
              foreach ($ex as $photo) {
                $out .= l(flickr_img($photo, variable_get('flickr_context_tags_size', 'm')), flickr_photo_page_url($photo['owner'], $photo['id']) , array(
                  'html' => TRUE,
                ));
              }
            }

            $mtags = flickr_context_tags_node_machine_tags($node);
            $tag_inputs = array();
            foreach ($mtags as $tag) {
              $tag_inputs[] = '<input class="flickr-machine-tag select-all" value="' . htmlspecialchars($tag) . '" /><br />';
            }
            $out .= '<p>' . t('Tag your pictures with !tag ...to make them show up here', array(
              '!tag'=> join(t('or '), $tag_inputs),
            )) . '</p>';

            $block['content'] = $out;
          }
          else {
            $block['subject'] = t('From Flickr');
            $alias = drupal_get_path_alias($_GET['q']);
            $paths = variable_get('flickr_context_tags_contexts', array());
            foreach ($paths as $expr => $tags) {
              if (preg_match($expr, $alias)) {
                $args = flickr_tag_request_args($tags, 'any');
                $default_place = variable_get('flickr_context_tags_default_place_id', '');
                if (!empty($default_place)) {
                  $args['place_id'] = $default_place;
                }
                // User?
                $user = variable_get('flickr_context_tags_userid', NULL);
                $photos = flickr_photos_search($user, 1, $args);

                if (!empty($photos['photo'])) {
                  $block['content'] = flickr_context_tags_images($photos['photo'], 18);
                }
                break;
              }
            }
          }
        break;
      }
      return $block;
    break;
  }
}

function flickr_context_tags_images($photos, $limit=0) {
  $out = '';
  $count = 0;
  $may_block = user_access('flickr context tags block user');
  foreach ($photos as $photo) {
    $blocked = flickr_context_tags_images_blocked($photo);
    if (!$blocked || $may_block) {
      $count++;
      $out .= '<span class="flickr-image ' . ($blocked?'flickr-image-blocked':'') . '">';
      if ($may_block) {
        $out .= l($blocked?t('Unblock user'):t('Block user'),'flickr-context-tags/user/' . $photo['owner'], array(
          'attributes' => array(
            'class' => 'block-link ' . ($blocked?'block-link-unblock':'block-link-block'),
          ),
        ));
      }
      $out .= l(flickr_img($photo, variable_get('flickr_context_tags_size', 'm')), flickr_photo_page_url($photo['owner'], $photo['id']) , array(
        'html' => TRUE,
      ));
      $out .= '</span>';

      if ($limit && $count>=$limit) {
        break;
      }
    }
  }
  return $out;
}

function flickr_context_tags_set_user_block($user_id, $block=TRUE) {
  global $user;
  $is_blocked = flickr_context_tags_user_blocked($user_id);
  if ($block && !$is_blocked) {
    drupal_write_record('flickr_blocked_users', $values=array(
      'user_id' => $user_id,
      'uid' => $user->uid,
    ));
  }
  else if (!$block && $is_blocked) {
    db_query("DELETE FROM {flickr_blocked_users} 
      WHERE user_id='%s'", array(
        ':user_id' => $user_id,
    ));
  }
}

function flickr_context_tags_user_blocked($user_id) {
  $blocked = db_result(db_query("SELECT COUNT(user_id) 
    FROM {flickr_blocked_users} 
    WHERE user_id='%s'", array(
      ':user' => $user_id,
  )));
  return $blocked == 1;
}

function flickr_context_tags_images_blocked($photo) {
  static $known;
  if ($known[$photo['owner']]) {
    return $known[$photo['owner']];
  }
  else {
    $blocked = flickr_context_tags_user_blocked($photo['owner']);
    return ($known[$photo['owner']] = $blocked == 1);
  }
}

function _flickr_context_tags_machine($ns, $name, $value) {
  return $ns . ':' . $name . '=' . $value;
}

function flickr_context_tags_flickr_node_machine_tags_alter(&$tag_data, $node, $ns) {
  $tag_data[$ns]['node'] = $node->nid;
  foreach ($node->taxonomy as $tid => $term) {
    $name = str_replace('"', '', mb_strtolower($term->name));
    if (strpos($name, ' ')) {
      $name = '"' . $name . '"';
    }
    $tag_data[$ns]['is'] = $name;
  }
}

function flickr_context_tags_node_machine_tag($node) {
  return _flickr_context_tags_machine(variable_get('flickr_context_tags_mech_namespace', ''),
    'node', $node->nid);
}


/**
 * Gets a list of machine tags that can be used to associate a photo with a node
 *
 * @return array(string) An array of tags
 **/
function flickr_context_tags_node_machine_tags($node) {
  $tag_data = array();
  $ns = variable_get('flickr_context_tags_mech_namespace', '');
  drupal_alter('flickr_node_machine_tags', $tag_data, $node, $ns);

  $tags = array();
  foreach ($tag_data as $ns => $tag) {
    foreach ($tag as $name => $value) {
      $tags[] = _flickr_context_tags_machine($ns, $name, $value);
    }
  }

  return $tags;
}

function flickr_context_tags_get_photos($node) {
  // Get photos added through machine tags
  $tags = flickr_context_tags_node_machine_tags($node);
  if (count($tags)>20) {
    $tags = array_slice($tags, 0, 20);
  }
  $args = flickr_tag_request_args($tags, 'any');

  // User?
  $user = variable_get('flickr_context_tags_userid', NULL);
  $explicit_photos = flickr_photos_search($user, 1, $args);

  // Search by title
  $args = array('text' => mb_strtolower($node->title));
  $force_place = variable_get('flickr_context_tags_force_default_place_id', FALSE);
  $default_place = variable_get('flickr_context_tags_default_place_id', '');

  if ($force_place && !empty($default_place)) { // Use default place if forced
    $args['place_id'] = $default_place;
  }
  else if (module_exists('simple_geo') && isset($node->simple_geo_position)) { // Try to deduce the place from geodata
    $ll = split(' ', $node->simple_geo_position);
    $res = flickr_request('flickr.places.findByLatLon', array(
      'lat' => $ll[0],
      'lon' => $ll[1],
      'accuracy' => 11, //City-level
    ));
    $place = $res['places']['place'];
    if (!empty($place)) {
      $place = $place[0];
      $args['place_id'] = $place['place_id'];
    }
    else { // Set direct coordinates if no place could be found
      $args['lat'] = $ll[0];
      $args['lon'] = $ll[1];
    }
  }
  else if (!empty($default_place)) { // Use the default place if it was provided
    $args['place_id'] = $default_place;
  }
  // User?
  $user = variable_get('flickr_context_tags_userid', NULL);
  $explicit_photos = flickr_photos_search($user, 1, $args);
  $text_photos = flickr_photos_search($user, 1, $args);

  return array_merge($explicit_photos['photo'], $text_photos['photo']);
}

function flickr_context_tags_get_related($node) {
  $tags = array();
  $tags[] = mb_strtolower($node->title);
  foreach ($node->taxonomy as $tid => $term) {
    $tags[] = mb_strtolower($term->name);
  }
  return $tags;
}